import 'package:flutter/material.dart';
import '../../models/rating.dart';

import '../../services/rating_service.dart';
import '../../services/application_service.dart';
import '../../widgets/rating/star_rating_input.dart';

class RatingDialogScreen extends StatefulWidget {
  final String raterId;
  final String raterType;
  final String ratedId;
  final String ratedType;
  final String ratedName;
  final String? jobPostingId;
  final String? servicePostingId;
  final String? title;

  const RatingDialogScreen({
    super.key,
    required this.raterId,
    required this.raterType,
    required this.ratedId,
    required this.ratedType,
    required this.ratedName,
    this.jobPostingId,
    this.servicePostingId,
    this.title,
  });

  @override
  State<RatingDialogScreen> createState() => _RatingDialogScreenState();
}

class _RatingDialogScreenState extends State<RatingDialogScreen> {
  final _formKey = GlobalKey<FormState>();
  final _reviewController = TextEditingController();
  final _ratingService = RatingService();

  int _rating = 0;
  bool _isAnonymous = false;
  bool _isLoading = false;
  bool _canRate = false;
  Rating? _existingRating;
  String? _blockingMessage;

  @override
  void initState() {
    super.initState();
    _checkRatingPermissions();
  }

  @override
  void dispose() {
    _reviewController.dispose();
    super.dispose();
  }

  Future<void> _checkRatingPermissions() async {
    try {
      // First check if job is completed (for job-based ratings)
      if (widget.jobPostingId != null) {
        final applications = await ApplicationService.getApplicationsForJob(widget.jobPostingId!);
        final userApplication = applications.where((app) => 
          (widget.raterType == 'helper' && app.helperId == widget.raterId) ||
          (widget.raterType == 'employer' && app.jobId == widget.jobPostingId)
        ).firstOrNull;

        if (userApplication == null || !userApplication.isCompleted) {
          setState(() {
            _canRate = false;
            _blockingMessage = 'You can only rate after the job is completed.';
          });
          return;
        }
      }

      // Check for existing rating
      final existingRating = await _ratingService.getExistingRating(
        raterId: widget.raterId,
        raterType: widget.raterType,
        ratedId: widget.ratedId,
        ratedType: widget.ratedType,
        jobPostingId: widget.jobPostingId,
        servicePostingId: widget.servicePostingId,
      );

      setState(() {
        _canRate = true;
        _existingRating = existingRating;
        if (existingRating != null) {
          _rating = existingRating.rating;
          _reviewController.text = existingRating.reviewText ?? '';
          _isAnonymous = existingRating.isAnonymous;
        }
      });
    } catch (e) {
      setState(() {
        _canRate = false;
        _blockingMessage = 'Unable to verify rating permissions.';
      });
    }
  }

  Future<void> _submitRating() async {
    if (_rating == 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a rating'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      Rating? result;

      if (_existingRating != null) {
        // Update existing rating
        result = await _ratingService.updateRating(
          _existingRating!.id,
          rating: _rating,
          reviewText: _reviewController.text.trim().isEmpty 
              ? null 
              : _reviewController.text.trim(),
          isAnonymous: _isAnonymous,
        );
      } else {
        // Create new rating
        final newRating = Rating(
          id: '', // Will be generated by database
          raterId: widget.raterId,
          raterType: widget.raterType,
          ratedId: widget.ratedId,
          ratedType: widget.ratedType,
          jobPostingId: widget.jobPostingId,
          servicePostingId: widget.servicePostingId,
          rating: _rating,
          reviewText: _reviewController.text.trim().isEmpty 
              ? null 
              : _reviewController.text.trim(),
          isAnonymous: _isAnonymous,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );

        result = await _ratingService.createRating(newRating);
      }

      if (result != null) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                _existingRating != null 
                    ? 'Rating updated successfully!' 
                    : 'Rating submitted successfully!',
              ),
              backgroundColor: Colors.green,
            ),
          );
          Navigator.of(context).pop(result);
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Failed to submit rating. Please try again.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title ?? 'Rate ${widget.ratedName}'),
        backgroundColor: Colors.transparent,
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: _canRate ? _buildRatingForm() : _buildBlockedState(),
      ),
    );
  }

  Widget _buildBlockedState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.block,
            size: 64,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'Rating Not Available',
            style: Theme.of(context).textTheme.titleLarge?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.grey[700],
            ),
          ),
          const SizedBox(height: 8),
          Text(
            _blockingMessage ?? 'Unable to rate at this time.',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              color: Colors.grey[600],
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Go Back'),
          ),
        ],
      ),
    );
  }

  Widget _buildRatingForm() {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _existingRating != null 
                        ? 'Update your rating for ${widget.ratedName}'
                        : 'How was your experience with ${widget.ratedName}?',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 20),
                  Center(
                    child: StarRatingInput(
                      rating: _rating,
                      onRatingChanged: (rating) {
                        setState(() {
                          _rating = rating;
                        });
                      },
                      size: 40,
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Write a review (optional)',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 12),
                  TextFormField(
                    controller: _reviewController,
                    decoration: const InputDecoration(
                      hintText: 'Share your experience...',
                      border: OutlineInputBorder(),
                    ),
                    maxLines: 4,
                    maxLength: 500,
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 16),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Checkbox(
                    value: _isAnonymous,
                    onChanged: (value) {
                      setState(() {
                        _isAnonymous = value ?? false;
                      });
                    },
                  ),
                  Expanded(
                    child: Text(
                      'Submit rating anonymously',
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                  ),
                ],
              ),
            ),
          ),
          const Spacer(),
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: _isLoading ? null : _submitRating,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
              ),
              child: _isLoading
                  ? const SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : Text(
                      _existingRating != null 
                          ? 'Update Rating' 
                          : 'Submit Rating',
                      style: const TextStyle(fontSize: 16),
                    ),
            ),
          ),
        ],
      ),
    );
  }
}
